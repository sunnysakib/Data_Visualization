# -*- coding: utf-8 -*-
"""Simple Linear & Polynomial Regression_2019-3-60-028.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1chirDNs_1F5_Djm0VVnotrajQJ9HncPb
"""

# Import the numpy and pandas package

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""# **Medical Cost Dataset**"""

data = pd.read_csv("medical_cost.csv") #load the dataset
data

# Provides some information regarding the columns in the data
data.info()

data1 = data.drop(['sex', 'region', 'smoker', 'Id'], axis=1)
data1

data1.info()

data1.isnull().sum()

data1.describe()

# These Plots help to explain the values and how they are scattered

plt.figure(figsize=(12,6))
sns.pairplot(data,x_vars=['bmi', 'age', 'children'],y_vars=['charges'],size=5,kind='scatter')
plt.xlabel('bmi')
plt.ylabel('charges')
plt.title('Charge Prediction')
plt.show()

data1.head(3)

X = data1[['age','bmi','children']]
y = data1['charges']

X = X.values.reshape(-1,1)
X

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Split the data for train and test
X_train,X_test,y_train,y_test = train_test_split(X,y,train_size=0.7,random_state=100)
print(X_train.shape)
print(y_train.shape)

# Fitting the model
lr_model = LinearRegression()
lr_model.fit(X_train,y_train)

# Predict using test data
y_predict = lr_model.predict(X_test)
y_predict

# Predicted Score of train data
train_accuracy = lr_model.score(X_train, y_train)
train_accuracy

test_accuracy = lr_model.score(X_test, y_test)
test_accuracy

from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import r2_score

print('Mean absolute error = ', mean_absolute_error(y_test,y_predict))
print('Mean square error = ', mean_squared_error(y_test,y_predict))
print('R2 Score = ', r2_score(y_test,y_predict))

"""# **Polynomial Regression**"""

from sklearn.preprocessing import PolynomialFeatures

poly = PolynomialFeatures(degree =2)
x_train_poly = poly.fit_transform(X_train)
x_test_poly = poly.fit_transform(X_test)

model = LinearRegression()
model.fit(x_train_poly, y_train)

predict_train_poly = model.predict(x_train_poly)
predict_train_poly

predict_test_poly = model.predict(x_test_poly)
predict_test_poly

print(X_train.shape)
print(y_train.shape)

print(predict_train_poly.shape)
print(X_train['age'].shape)

plt.figure(figsize=(12,8))
 plt.scatter(X_train['age'], y_train, color="red" )
plt.plot(X_train['age'], predict_train_poly, color = 'gray')
plt.show()

plt.scatter(X_train['bmi'], y_train, color = 'green')
plt.plot(X_train['bmi'], predict_train_poly, color = 'blue')

plt.scatter(X_train['children'], y_train, color = 'red')
plt.plot(X_train['children'], predict_train_poly, color = 'blue')

train_accuracy = model.score(x_train_poly, y_train)
train_accuracy

test_accuracy = model.score(x_test_poly, y_test)
test_accuracy

print('Mean absolute error = ', mean_absolute_error( y_test,predict_test_poly))
print('Mean square error = ', mean_squared_error( y_test,predict_test_poly))
print('R2 Score = ', r2_score( y_test,predict_test_poly))

"""# **Position Salaries Dataset**"""

#Linear Regression
lin_reg = LinearRegression()
lin_reg.fit(X, y)

#Polynomial Regression
poly_reg = PolynomialFeatures(degree = 4)
X_poly = poly_reg.fit_transform(X)
poly_reg.fit(X_poly, y)
lin_reg_2 = LinearRegression()
lin_reg_2.fit(X_poly, y)

#Visualising the Linear Regression results
# plt.scatter(X, y, color = 'red')
plt.plot(X, lin_reg.predict(X), color = 'blue')
plt.title('Truth or Bluff (Linear Regression)')
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()

#Visualising the Polynomial Regression results
plt.scatter(X, y, color = 'red')
plt.plot(X, lin_reg_2.predict(poly_reg.fit_transform(X)), color = 'blue')
plt.title('Truth or Bluff (Polynomial Regression)')
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()