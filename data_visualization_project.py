# -*- coding: utf-8 -*-
"""Data Visualization Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-O2wu4Mg4fXMRvetX4HmT0vtHGmTxGQy
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

df = pd.read_csv('ReelView.csv')
df_index = pd.read_csv('ReelView.csv', index_col="genre")

df.shape

df.describe

df.duplicated().sum()

df.isnull().sum()

df.head(2000)

sns.histplot(df['run_time'], bins=100, kde=True).set_xlim(50, 300)
plt.title("Fig2: Count Maximum Run Time")

sns.histplot(df['release_date'], kde=True)
plt.title("Fig3: Count Maximum movie release date")

sns.countplot(x='stars_rating',data=df)
plt.title('Value Counts of Rating Stars')



df.head()

bars = df['mpaa_rating'].value_counts()
bars

bars1 = bars[['Violence, Profanity', 'Violence', 'Profanity',
       'Profanity, Sexual Content', 'Nothing Objectionable'
       ]]

bars1

plt.bar(bars1.index, bars1.values, color='g')
plt.xticks(rotation = 10)
plt.rcParams['font.size'] = 8
plt.title('fig4: mpaa rating')

sns.histplot(df['stars_rating'], bins=5)

sns.boxplot(data=df, x='stars_rating', y='release_date')
plt.title('fig5: stars_rating by release_date')

df.genre.nunique()

df.genre.value_counts(normalize=True)*100

df[['genre']].value_counts()

df_genre = df_index.loc[['DRAMA', 'THRILLER', 'COMEDY', 'Fantasy/Action', 'War']]
df_genre



sns.heatmap(df.corr(),linewidths=1,linecolor='white')
plt.title('fig8: correlation matrix')

df.head()

df_value = df['director'].value_counts()[0:10]
df_value

plt.bar(df_value.index, df_value.values)
plt.xticks(rotation = 20)
plt.rcParams['font.size'] = 8
plt.suptitle('fig6: Top 10 Director')

runtime = df["run_time"]
runtime_cat = []
for i in runtime:
    if i < 60:
        runtime_cat.append("Under_1_hour")
    elif i < 90:
        runtime_cat.append("Under_1.5_hours")
    elif i < 120:
        runtime_cat.append("Under_2_hours")
    elif i >= 120:
        runtime_cat.append("Over_2_hours")
    else:
        runtime_cat.append(i)

plt.pie([runtime_cat.count("Under_1_hour"),
         runtime_cat.count("Under_1.5_hours"),
         runtime_cat.count("Under_2_hours"),
         runtime_cat.count("Over_2_hours")],
       labels = ["Under_1_hour", "Under_1.5_hours", "Under_2_hours", "Over_2_hours"])
plt.title("fig 7. Distribution of movie runtime over different movies")