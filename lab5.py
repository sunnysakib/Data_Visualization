# -*- coding: utf-8 -*-
"""lab5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yqMpC0nPDMJH7dbMl97nlWlJ6lRuLDZ0
"""

list1 = [1,2,3]

list2 = [3,4,5]

list3 = list1 + list2
list3

import numpy as np
arr1 = np.array(list1)
arr2 = np.array(list2)
arr3 = arr1 + arr2
arr3

list3 = [0,0,0]
for i in range(len(list1)):
  list3[i] = list1[i] + list2[i]
list3

np.mean(list3)

A = np.array([[1, 2, 0], [4,2,5], [1,0,2]])
A

def submatrix(A, row, col):
    submat = []
    for i in range(len(A)):
        if i == row:
            continue
        subrow = []
        for j in range(len(A[0])):
            if j != col:
              subrow.append(A[i][j])
        submat.append(subrow)
    return submat

submatrix(A, 0, 0)

def determinant(A):
    if len(A) == 1:
        return A[0][0]
    det = 0
    for j in range(len(A)):
        if j % 2 == 0:
            sign = 1
        else:
            sign = -1
        det += sign * A[0][j] * determinant(submatrix(A, 0, j))

    return det

det = determinant(A)
 det

def cofactor_matrix(A):
    cofactors = np.zeros(9).reshape(3,3)
    for i in range(len(A)):
        for j in range(len(A)):
            if (i + j) % 2 == 0:
              sign = 1
            else:
              sign = -1
            submat = submatrix(A, i, j)
            cofactors[i][j] = sign * determinant(submat)

    return cofactors

cofactor = cofactor_matrix(A)
cofactor

def transpose(cofactor):
  AT = np.zeros(9).reshape(3,3)
  for i in range(len(cofactor)):
    for j in range(len(cofactor[0])):
      AT[i][j] = cofactor[j][i]
  return AT

transpose_mat = transpose(cofactor)
transpose_mat

def inverse(mat, det):
  inv = np.zeros(9).reshape(3,3)
  for i in range(len(mat)):
    for j in range(len(mat)):
      inv[i][j] = mat[i][j] / det
  return inv

inverse(transpose_mat, det)